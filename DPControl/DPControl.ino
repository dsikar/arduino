#include <Arduino.h>
#include <SPI.h>
#include <U8g2lib.h>
#include "LCDData.h"
#include "StepperPins.h"
#include <TimerOne.h>

// U8G2_SSD1306_128X64_NONAME_1_4W_SW_SPI u8g2(U8G2_R0, /* clock=*/ 13, /* data=*/ 11, /* cs=*/ 10, /* dc=*/ 9, /* reset=*/ 8);
U8G2_ST7920_128X64_F_SW_SPI u8g2(U8G2_R0, /* clock=*/ 15 /* A4 */ , /* data=*/ 17 /* A2 */, /* CS=*/ 16 /* A3 */, /* reset=*/ U8X8_PIN_NONE);

// menu tracker
int iMTracker = 0;

// OUR GENERIC STRUCT
struct MenuItem
{
  int iAbsMin; // always 0 except for menu tracker, starting at one to avoid printer tracker itself
  // Do not go above 14 NB this is in case there is a slight offset in read values, e.g. initial absolute value jumps from 0 to 2. TODO investigate jumps of 3.
  //int iAbsMax; //  = (iEncStep * arrMax) + (iEncStep / 2); calculate
  //int arrMin; // should alway be 0
  int arrMax; // used to calculate iAbsMax
  volatile int lastEncoded;
  volatile long encoderValue;
  long lastEncoderValue;
  int encoded; 
  byte xPos;
  byte yPos;        
};

// Two menu items, first has two options, second has 4 options
// (iEncStep * arrMax) + (iEncStep / 2);
MenuItem menuItem[4] = {{4,3,3,4,4,0,10,10}, // magic numbers, start at array position 1 IMPORTANT: NEED TO +1 to array size menuItem[4] for every item added
                       {0,1,0,0,0,0,10,25}, // on off
                       {0,108,0,0,0,0,10,40}, // speeds                       
                       {0,301,0,0,0,0,10,55}}; // distance covered // add cycles later 
                       // {0,301,0,0,0,0,10,55}};    // start // up down
                       //{0,301,0,0,0,0,10,55}};  // end                      // manual/prog

// array boundaries
// int arrMin = 0;
// int arrMax = 108;

// <CODE GENERATED BY SCRIPT ENDS>

// encode step size
// int iEncStep = 4;

// Encoder limits - outside these do not increment or decrement encoder value
//int iAbsMin = 0;
// Do not go above 14 NB this is in case there is a slight offset in read values, e.g. initial absolute value jumps from 0 to 2. TODO investigate jumps of 3.
//int iAbsMax = (ENCODER_STEP * arrMax) + (ENCODER_STEP / 2);



volatile int lastEncoded = 0;
volatile long encoderValue = 0;
long lastEncoderValue = 0;
int encoded = 0;
// long lastencoderValue = 0; 
// int lastMSB = 0;
// int lastLSB = 0;

// state machine
bool bOn = false;
bool bButtonReleased = true;
bool bButtonPushed = false;
// not really state machine, need to tidy up later
int iMenuIdx = 0;

/******************************

 Screw renderer

******************************/
void render(void) {
  // read state of digital pin
  char buf[15];
  
  u8g2.setFont(u8g2_font_pressstart2p_8u);  
  // Get asterisk position, stored as encoder value in first MenuItem struct
  int iMit = GetMenuIndexTrack(); 
  int menuArraySize = sizeof(menuItem) / sizeof(menuItem[0]);
  for(int i = 0; i < menuArraySize; i++)
  {
    switch(i)
    {
      case 1: 
            sprintf(buf, "[%d]", (menuItem[i].encoderValue / ENCODER_STEP));   
            u8g2.drawStr( menuItem[i].xPos, menuItem[i].yPos, buf); 
            break;
      case 2:
            // strcpy_P(buffer, (char*)pgm_read_word(&(string_table[i])));
            strcpy_P(buf, (char*)pgm_read_word(&(speed_table[menuItem[i].encoderValue / ENCODER_STEP])));
            // this line is breaking our code 
            // sprintf(buf, "[%s]", speeds[(menuItem[i].encoderValue / iEncStep)]); 
            // speeds[(menuItem[i].encoderValue / iEncStep)]  
            u8g2.drawStr( menuItem[i].xPos, menuItem[i].yPos, buf); 
            break;  
      // distances
      case 3: 
            strcpy_P(buf, (char*)pgm_read_word(&(distance_table[menuItem[i].encoderValue / ENCODER_STEP])));
            // sprintf(buf, "[%d]", (menuItem[i].encoderValue / iEncStep));   
            u8g2.drawStr( menuItem[i].xPos, menuItem[i].yPos, buf);
            break;
      case 0:
        break;
      // TODO CASES
      // Cycles x/y x = programmed, y = completed
      // Speed up
      // speed down
      // start pos
      // end pos
      // current pos
      // direction up/down
      // ??? Mode Manual/Auto
      // ??? Calibrate
    }
    // sprintf(buf, "[%d]", (menuItem[i].encoderValue / iEncStep));   
    // u8g2.drawStr( menuItem[i].xPos, menuItem[i].yPos, buf); 
    // if this is the current active item, print an asterisk to denote state 
    if(i == (menuItem[0].encoderValue / ENCODER_STEP))
    {
      // TODO make offsets variables      
      u8g2.drawStr( menuItem[i].xPos - 7, menuItem[i].yPos + 2, "*"); 
    }
  } 
  // debug encoded values
//  sprintf(buf, "1: [%d]", menuItem[0].lastEncoded);  
//  u8g2.drawStr(70, 10, buf);
//  sprintf(buf, "2: [%d]", menuItem[0].encoderValue);  
//  u8g2.drawStr(70, 20, buf);  
//  sprintf(buf, "2: [%d]", menuItem[0].lastEncoderValue);  
//  u8g2.drawStr(70, 30, buf);  
//  sprintf(buf, "2: [%d]", menuItem[0].encoded);  
//  u8g2.drawStr(70, 40, buf);  
//  if(digitalRead(encoderSwitchPin) == 0) // active low
//  {
//    sprintf(buf, "[%d]", (menuItem[0].encoderValue / iEncStep));   
//    u8g2.drawStr( 70, 20, buf);     
//  }
  // debug button press
//  sprintf(buf, "%d ",digitalRead(encoderSwitchPin));   
  //u8g2.drawStr( 70, 40, (bOn == true ? "On" : "Off")); 
//  // debug button press
//  sprintf(buf, "%d ",digitalRead(encoderSwitchPin));   
//  u8g2.drawStr( 100, 20, (bButtonPushed == true ? "P: 1" : "P: 0"));   
// // debug button press
//  sprintf(buf, "%d ",digitalRead(encoderSwitchPin));   
//  u8g2.drawStr( 100, 40, (bOn ? "On" : "Off")); 
//  // debug button press
//  sprintf(buf, "%d ",digitalRead(encoderSwitchPin));   
//  u8g2.drawStr( 100, 60, buf);  
}

void pushedButton(void)
{
  static int buttonPushCounter = 1;   // counter for the number of button presses
  static int buttonState = 1;         // current state of the button - active low
  static int lastButtonState = 1;     // previous state of the button - active low
  // read the pushbutton input pin:
  buttonState = digitalRead(encoderSwitchPin); 
  // compare the buttonState to its previous state
  if (buttonState != lastButtonState) 
  {
    // if the state has changed, increment the counter
    if (buttonState == LOW) {
      buttonPushCounter++;   
    }
    if (buttonPushCounter == 3)
    {
      // reset, maybe less computation than taking remainder of large integer
      buttonPushCounter = 1;
    }
    delay(50);
  }
  lastButtonState = buttonState;
  if (buttonPushCounter % 2 == 0) {
    bOn = true;
    SetMenuIndexTrack(bOn);
  } else {
    bOn = false;
    SetMenuIndexTrack(bOn);
  }  
}


// updateEncoder
/**************************************
 * Keep track of what index is being updated
 * Possible options
 * 1. Position of active control is being updated
 * update relevant index
 * 2. Control has been selected and is being updated
 * update relevantindex
 * TODO each control will have unique min and max pairs
 */

void SetMenuIndexTrack(bool bOn)
{
  if(bOn == true)
  { 
    // Change value of highlighted menu option
    iMenuIdx = menuItem[0].encoderValue / ENCODER_STEP;  
  } else
  {
    // change between menus
    iMenuIdx = 0; // menuItem[0].encoderValue / iEncStep;
  }
}

int GetMenuIndexTrack()
{
  return iMenuIdx; // menuItem[0].encoderValue / iEncStep;
}

void updateEncoder(){
  int MSB = digitalRead(encoderPin1); //MSB = most significant bit
  int LSB = digitalRead(encoderPin2); //LSB = least significant bit
  // check if rotary encoder has been pushed
  // pushedButton(); 
  // get array we are tracking
  int iMit = GetMenuIndexTrack();  
  int iAbsMax = (ENCODER_STEP * menuItem[iMit].arrMax) + (ENCODER_STEP / 2);
  encoded = (MSB << 1) |LSB; 
  //converting the 2 pin value to single number 
  int sum = (menuItem[iMit].lastEncoded << 2) | encoded;  
  //adding it to the previous encoded value 
  if(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011){
    if(menuItem[iMit].encoderValue < iAbsMax) {
      menuItem[iMit].encoderValue++;
    }
  }
  if(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000){
    if(menuItem[iMit].encoderValue > menuItem[iMit].iAbsMin) {
      menuItem[iMit].encoderValue--;
    } 
  }
  // used for bitwise operations
  menuItem[iMit].lastEncoded = encoded;
  // update index
  if(menuItem[iMit].lastEncoderValue != menuItem[iMit].encoderValue) {
    menuItem[iMit].lastEncoderValue = menuItem[iMit].encoderValue;
  }  
}

void setup(void) {
  u8g2.begin();

  // Encoder pins
  pinMode(encoderPin1, INPUT); 
  pinMode(encoderPin2, INPUT);
  pinMode(encoderSwitchPin,  INPUT);
 
  digitalWrite(encoderPin1, HIGH); //turn pullup resistor on
  digitalWrite(encoderPin2, HIGH); //turn pullup resistor on
  digitalWrite(encoderSwitchPin,  HIGH); //turn pullup resistor on

  pinMode(BOTTOM_PIN, INPUT);
  pinMode(TOP_PIN, INPUT);
  pinMode(DIRECTION_PIN, OUTPUT); 
  pinMode(PWM_PIN, OUTPUT);  
    
  // Encoder interrupts
  attachInterrupt(0, updateEncoder, CHANGE);
  attachInterrupt(1, updateEncoder, CHANGE); 

  Timer1.initialize(37500); // 37500 0,50 cm/min
  Timer1.attachInterrupt( timerIsr ); // attach the service routine here    
}

void loop(void) {
  u8g2.firstPage();
  do {
    pushedButton();
    render();   
  } while ( u8g2.nextPage() );
  // delay(50);
}

/// --------------------------
/// Custom ISR Timer Routine
/// --------------------------
void timerIsr()
{
    if(bOn == true) {
      // Toggle LED at ISR Timer interval
      digitalWrite( PWM_PIN, digitalRead( 13 ) ^ 1 );      
    }
}
